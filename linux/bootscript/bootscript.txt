# bootscript template

# This bootscript is used to enable to FPGA2SDRAM bridge successfully.

########### BEGIN BOOT SCRIPT #############

# set fpga2sdram peripheral to reset by writing 0 to fpgaportrst register (HPS register map)
echo --- Resetting fpga2sdram peripheral ---
mw 0xFFC25080 0x0


# load rbf for fpga into memory
echo --- Loading .rbf from eMMC ---
fatload mmc 0:1 0x2000000 sdr.rbf

# flash fpga with loaded rbf (this needs to be done while fpga2sdram peripheral is in reset)
# 0x2000000 is the memory address of where to load fpga image
# 0x700000 is 7 MB and is the approximate size of .rbf file (from Cyclone V datasheet)
echo --- Programming FPGA ---
echo -----Loading image------
fpga load 0 0x2000000 0x700000

# write 1 to the applycfg bit in the staticcfg register
echo --- applying fpga2sdram cfg bit ---
mw 0xFFC2505C 0xA

# re-enable the fpgaportrst register
echo --- Taking fpga2sdram peripheral out of reset ---
mw 0xFFC25080 0xFFFF

# continue with boot
echo --- Continuing with boot process ---
#boot

# from the rocketboard embeddedlinux userguide
# dont use!!!  #run bridge_enable_handoff;  ---------- this is not defined! 

echo -- Setting Env Variables --
setenv mmcloadpart 1
setenv fdtimage custom.dtb;
setenv mmcroot /dev/mmcblk0p2;
setenv mmcload 'mmc rescan;${mmcloadcmd} mmc 0:${mmcloadpart} ${loadaddr} ${bootimage};${mmcloadcmd} mmc 0:${mmcloadpart} ${fdt_addr} ${fdtimage};';
setenv mmcboot 'setenv bootargs console=ttyS0,115200 root=${mmcroot} rw rootwait mem=512M; bootz ${loadaddr} - ${fdtaddr}';

run mmcload;
run mmcboot;


########### END BOOT SCRIPT ###############


#### OTHER COMMANDS FOR FUTURE REF ########
# 
#-Run bridge enable command
#bridge enable;
#
#-Set the privilege filter bits for the H2F and LWH2F bridges and everything 
#mw.l 0xFFD24800 0xFFFFFFFF; 
#
#-Clear the disable bit, F2H access 
#mw.q 0xF70105A0 0x0000000000000000; 
#
#-Clear the non-secure and privileged valid bits, F2H access 
#mw.q 0xF7010668 0x000000fffffc0000; 
#
#-Enable both secure and non-secure transactions for all masters (axi_ap, F2H, mpu) to system manager space
#mw.l 0xFFD2115C 0x01010001; 
#
#-Configure the SDRAM L3 interconnect F2SDRAM0 firewall region0 registers 
#mw.l 0xF8020210 0x00000000; 
#mw.l 0xF8020214 0x00000000; 
#mw.l 0xF8020218 0x3FFFFFFF; 
#mw.l 0xF802021C 0x00000000; 
#
#-Enable the SDRAM L3 interconnect F2SDRAM0 firewall region0 
#mw.l 0xF8020204 0x00000001; 
#
#-Configure the SDRAM L3 interconnect F2SDRAM1 firewall region0 registers 
#mw.l 0xF8020310 0x00000000; 
#mw.l 0xF8020314 0x00000000; 
#mw.l 0xF8020318 0x3FFFFFFF; 
#mw.l 0xF802031C 0x00000000; 
#
#-Enable the SDRAM L3 interconnect F2SDRAM1 firewall region0 
#mw.l 0xF8020304 0x00000001; 
#
#-Configure the SDRAM L3 interconnect F2SDRAM2 firewall region0 registers 
#mw.l 0xF8020410 0x00000000; 
#mw.l 0xF8020414 0x00000000; 
#mw.l 0xF8020418 0x3FFFFFFF; 
#mw.l 0xF802041C 0x00000000; 
#
#-Enable the SDRAM L3 interconnect F2SDRAM2 firewall region0 
#mw.l 0xF8020404 0x00000001; 
#
#-Enable the F2SDRAM[012] in the DDR scheduler sideband manager 
#mw.l 0xF8024050 0x00000092; 
#
#-Release the 3xF2S, F2H, H2F and LWH2F bridges from reset 
#mw.l 0xFFD1102C 0x00000000;